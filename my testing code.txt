import { useState, useEffect, useRef } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import FlashCardList from "./FlashCardList";
import "./app.css"
import axios from "axios";

function App() {
  const [flashCards, setFlashCards] = useState([])
  const [categories, setCategories] = useState([])
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const categoryEl = useRef()
  const amountEl = useRef()
  const difficultyEl = useRef()

  function fetchData() {
    setLoading(true);
    axios
      .get("https://opentdb.com/api_category.php")
      .then(res => {
        console.log(res.data)
        setCategories(res.data.trivia_categories)
        setLoading(false)
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      });
  }
  useEffect(() => {
    setLoading(true);
    axios
      .get("https://opentdb.com/api_category.php")
      .then(res => {
        console.log(res.data)
        setCategories(res.data.trivia_categories)
        setLoading(false)
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
        notifyError("Error loading categories. Retrying...");
      });
  
  }, [])

  useEffect(() => {
    console.log("Loading:", loading);
    console.log("Error:", error);

    // Automatically retry fetching categories when an error occurs
    if (error) {
      const timer = setTimeout(() => {
        setLoading(true);
        setError(null);
        fetchData();
      }, 5000); // Retry after 5 seconds

      return () => clearTimeout(timer);
    }
  }, [loading, error]);

  function decodeString(str) {
    const textArea = document.createElement("textarea")
    textArea.innerHTML = str
    return textArea.value
  }
  function notifyError(message) {
    toast.error(message, {
      position: toast.POSITION.TOP_CENTER,
    });
  }
  function handleSubmit(e) {
    e.preventDefault()
    let params =  {
      amount: amountEl.current.value
    }
    if (categoryEl.current.value !== 'any-category') {
      params.category = categoryEl.current.value
    }
    if (difficultyEl.current.value !== 'any-difficulty') {
      params.difficulty = difficultyEl.current.value
    }
    
    axios
      .get("https://opentdb.com/api.php", { params })
      .then(res => {
        console.log(res.data)
        setFlashCards(res.data.results.map((questionItem, index) => {
          const answer = decodeString(questionItem.correct_answer)
          const options = [
            ...questionItem.incorrect_answers.map(a => decodeString(a)),
            answer
          ]
          return {
            id: `${index}-${Date.now()}`,
            question: decodeString(questionItem.question),
            answer: answer,
            options: options.sort(() => Math.random() - .5)
          }
        }
      ))})
      .catch(err => {
        setError(err.message);
      });
  }

  return (
    <>
    <ToastContainer />
    <form className="header" onSubmit={handleSubmit}>
      <div className="form-group">
        <label htmlFor="category">Category</label>
        <select id="category" ref={categoryEl}>
        <option value="any-category" >Any Category</option>
          {categories.map(category => {
            return <option value={category.id} key={category.id}>{category.name}</option>
          })}
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="difficulty">Difficulty</label>
        <select id="difficulty" ref={difficultyEl}>
          <option value="any-difficulty" >Any Difficulty</option>
          <option value="easy">Easy</option>
          <option value="medium">Medium</option>
          <option value="hard">Hard</option> 
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="amount">Number Of Questions</label>
        <input type="number" id="amount" min="1" step="1" max="50" defaultValue={10} ref={amountEl} />
      </div>
      <div className="form-group">
        <button className="btn" type='submit' disabled={loading || error}>{loading ? 'Loading...' : 'Generate'}</button>
      </div>
    </form>
    <div className="container">
      <FlashCardList flashCards={ flashCards } />
    </div>
    {error && <p>Error: {error}</p>}
    </>
  );
}

export default App;
